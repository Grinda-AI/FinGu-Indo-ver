/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/users/{user_id}": {
    /**
     * Read User
     * @description Read all available institutions for user to connect into
     */
    get: operations["read_user_api_users__user_id__get"];
  };
  "/api/users/{user_id}/connected_institutions": {
    /**
     * Read User Connected Institutions
     * @description Read all institutions the user is associated into
     */
    get: operations["read_user_connected_institutions_api_users__user_id__connected_institutions_get"];
    /**
     * Upsert User Connected Institutions
     * @description Connect user to Institution
     */
    put: operations["upsert_user_connected_institutions_api_users__user_id__connected_institutions_put"];
  };
  "/api/users/{user_id}/connected_institutions/{institution_id}": {
    /**
     * Delete User Connected Institution
     * @description Disconnect user from Institution
     */
    delete: operations["delete_user_connected_institution_api_users__user_id__connected_institutions__institution_id__delete"];
  };
  "/api/users/{user_id}/messages": {
    /**
     * Read User Messages
     * @description Read user messages.
     *
     * :param request: The request object.
     * :param user_id: The ID of the user.
     * :param authorization: The authorization token.
     * :param page: The page number.
     * :param page_size: The number of items per page.
     * :param order: The order of the messages (ascending or descending).
     *
     * :return: The response object containing the user's messages.
     */
    get: operations["read_user_messages_api_users__user_id__messages_get"];
    /**
     * Create User Message
     * @description Creates a user message and sends it to the specified user.
     *
     * Args:
     *     request (Request): The request object.
     *     user_id (str): The ID of the user.
     *     message (Message): The message to be sent.
     *     authorization (str): The authorization header.
     *
     * Returns:
     *     dict: The response containing the request, data, and error fields.
     */
    post: operations["create_user_message_api_users__user_id__messages_post"];
  };
  "/api/users/{user_id}/messages/{message_id}": {
    /**
     * Read User Message
     * @description Retrieves a specific message for a given user from the database.
     *
     * Args:
     *     user_id (str): The ID of the user.
     *     message_id (str): The ID of the message.
     *
     * Returns:
     *     dict: A dictionary containing the response data.
     *         - "request" (dict): Information about the request made.
     *             - "route" (str): The route of the request.
     *             - "method" (str): The HTTP method used.
     *         - "data" (dict): The data retrieved from the database.
     *         - "error" (str): Any error that occurred during the retrieval.
     */
    get: operations["read_user_message_api_users__user_id__messages__message_id__get"];
    /**
     * Update User Message
     * @description Update a user's message.
     *
     * Args:
     *     user_id (str): The ID of the user.
     *     message_id (str): The ID of the message.
     *     message (Message): The updated message.
     *
     * Returns:
     *     dict: A dictionary containing the response data.
     *         - "request": A dictionary with the request details.
     *             - "route": The route of the request.
     *             - "method": The HTTP method of the request.
     *             - "data": The data sent in the request.
     *         - "data": The updated message data.
     *         - "error": Any error that occurred during the update.
     */
    put: operations["update_user_message_api_users__user_id__messages__message_id__put"];
    /**
     * Delete User Message
     * @description Deletes a user message from the database and returns the response.
     *
     * Parameters:
     *     user_id (str): The ID of the user.
     *     message_id (str): The ID of the message to be deleted.
     *
     * Returns:
     *     dict: A dictionary containing the response data.
     */
    delete: operations["delete_user_message_api_users__user_id__messages__message_id__delete"];
  };
  "/api/users/assistant/create": {
    /**
     * Create a new Assistant
     * @description Creates a new assistant for a user.
     */
    post: operations["create_assistant_api_users_assistant_create_post"];
  };
  "/api/users/assistant/{assistant_id}/thread/create": {
    /**
     * Create a new Thread
     * @description Creates a new conversation thread for a user's assistant.
     */
    post: operations["create_thread_api_users_assistant__assistant_id__thread_create_post"];
  };
  "/api/users/assistant/{assistant_id}/thread/{thread_id}/message": {
    /**
     * Add a Message
     * @description Add a message to a conversation thread.
     */
    post: operations["add_message_api_users_assistant__assistant_id__thread__thread_id__message_post"];
  };
  "/api/users/assistant/{assistant_id}/thread/{thread_id}/chat": {
    /**
     * Chat with Assistant
     * @description Retrieve responses from the assistant in a conversation thread.
     */
    get: operations["chat_with_assistant_api_users_assistant__assistant_id__thread__thread_id__chat_get"];
  };
  "/api/users/assistant/{assistant_id}/thread/{thread_id}/message_and_run": {
    /**
     * Add a Message and Run
     * @description Add a message to a conversation thread and run the conversation with the assistant.
     */
    post: operations["add_message_and_run_api_users_assistant__assistant_id__thread__thread_id__message_and_run_post"];
  };
  "/api/users/assistant/{assistant_id}/thread/{thread_id}/all_messages": {
    /**
     * Get All Messages
     * @description Retrieve all messages in a conversation thread.
     */
    get: operations["get_all_messages_api_users_assistant__assistant_id__thread__thread_id__all_messages_get"];
  };
  "/api/users/assistant/{assistant_id}/thread/{thread_id}/run_with_functions": {
    /**
     * Run Assistant With Functions
     * @description Run the assistant with specified functions and get the response.
     *
     * Args:
     * - assistant_id (str): The ID of the assistant.
     * - thread_id (str): The ID of the thread.
     * - instructions (str): The instructions for the conversation.
     * - functions (list): List of functions to be executed by the assistant.
     *
     * Returns:
     * - response (str): The assistant's response in the conversation thread.
     */
    post: operations["run_assistant_with_functions_api_users_assistant__assistant_id__thread__thread_id__run_with_functions_post"];
  };
  "/api/institutions": {
    /**
     * Read Institutions
     * @description Read all available institutions for user to connect into
     */
    get: operations["read_institutions_api_institutions_get"];
  };
  "/api/institutions/{institution_id}": {
    /** Read Institution */
    get: operations["read_institution_api_institutions__institution_id__get"];
  };
  "/api/codef/account/create": {
    /**
     * Create Account
     * @description To use an API that requires authentication, you must create a Connected ID.
     *     A Connected ID is created when an end user registers their account information.
     *     ref: https://developer.codef.io/common-guide/connected-id/register
     *
     *     Args:
     *         param (CreateAccountParam): The account creation parameters.
     *
     *             - countryCode (str):    Korea: KR
     *             - businessType (str):   Bank, savings bank: BK, card: CD, securities: ST, insurance: IS
     *             - organization (str):   The organization code
     *                 산업은행	0002	광주은행     0034
     *                 기업은행	0003	제주은행     0035
     *                 국민은행	0004	전북은행     0037
     *                 수협은행	0007	경남은행     0039
     *                 농협은행	0011	새마을금고   0045
     *                 우리은행	0020    신협은행     0048
     *                 SC은행	   0023    우체국      0071
     *                 씨티은행	0027	KEB하나은행  0081
     *                 대구은행	0031	신한은행     0088
     *                 부산은행	0032	K뱅크       0089
     *             - clientType (str):                 Individual: P / Company, Corporation: B / Consolidated: A
     *             - loginType	(str):                  0: Certificate, 1: ID/Password
     *             - derFile (str):                    [Basic certificate required] - Certificate der file string encoded in BASE64
     *             - keyFile (str):                    [Basic certificate required] - Certificate key file string encoded in BASE64
     *             - certFile (str):                   [Certificate pfx required] - Certificate pfx string encoded in BASE64
     *             - certType (str):                   Basic certificate (der/key) type: '1', certificate pfx type: 'pfx', (Default: 1)
     *             - id (str):                         Required for ID method, (Kiwoom) used for customers with multiple accounts
     *             - password (str):                   If using the certificate method, enter the certificate password, and if using the ID method, enter the ID password.
     *             - add_password (str):               (Kiwoom) Used for customers with multiple accounts
     *             - birthDate (str):                  "YYYYMMDD"
     *             - identity (str):	                *Insurance company only - check whether required information is entered
     *             - userName (str):                   *Insurance company - check whether required information is entered
     *             - loginTypeLevel (str):             *For Shinhan/Lotte corporate cards [Login classification] "0": User, "1": Business site/department manager, "2": General manager, (default: "2"))
     *             - clientTypeLevel (str):            *In case of Shinhan corporate card, [member classification] "0": credit card member, "1": check card member, "2": research grant credit card member
     *             - withdrawAccountNo (str):          * Daegu Bank [ID Login] Additional Information
     *             - withdrawAccountPassword (str):    Withdrawal account password	String	△	* Daegu Bank [ID Login] Additional Information
     *             - cardNo (str):                     Required if KB card possession verification is required: Enter the entire card number without masking
     *             - cardPassword (str):               When verification of KB card possession is required: First 2 digits of card PIN
     *
     *     Returns:
     *         dict: The response data containing the account details.
     */
    post: operations["create_account_api_codef_account_create_post"];
  };
  "/api/codef/account/add": {
    /**
     * Add Account
     * @description If an end user who has created a Connected ID wants to add account information for a new organization,
     *     he or she must use the Add Account API.
     *     ref: https://developer.codef.io/common-guide/connected-id/add
     *
     *     Args:
     *         param (AddAccountParam): The account adding parameters.
     *
     *             - countryCode (str):    Korea: KR
     *             - businessType (str):   Bank, savings bank: BK, card: CD, securities: ST, insurance: IS
     *             - organization (str):   The organization code
     *                 산업은행	0002	광주은행     0034
     *                 기업은행	0003	제주은행     0035
     *                 국민은행	0004	전북은행     0037
     *                 수협은행	0007	경남은행     0039
     *                 농협은행	0011	새마을금고   0045
     *                 우리은행	0020    신협은행     0048
     *                 SC은행	   0023    우체국      0071
     *                 씨티은행	0027	KEB하나은행  0081
     *                 대구은행	0031	신한은행     0088
     *                 부산은행	0032	K뱅크       0089
     *             - clientType (str):                 Individual: P / Company, Corporation: B / Consolidated: A
     *             - loginType	(str):                  0: Certificate, 1: ID/Password
     *             - derFile (str):                    [Basic certificate required] - Certificate der file string encoded in BASE64
     *             - keyFile (str):                    [Basic certificate required] - Certificate key file string encoded in BASE64
     *             - certFile (str):                   [Certificate pfx required] - Certificate pfx string encoded in BASE64
     *             - certType (str):                   Basic certificate (der/key) type: '1', certificate pfx type: 'pfx', (Default: 1)
     *             - id (str):                         Required for ID method, (Kiwoom) used for customers with multiple accounts
     *             - password (str):                   If using the certificate method, enter the certificate password, and if using the ID method, enter the ID password.
     *             - add_password (str):               (Kiwoom) Used for customers with multiple accounts
     *             - birthDate (str):                  "YYYYMMDD"
     *             - identity (str):	                *Insurance company only - check whether required information is entered
     *             - userName (str):                   *Insurance company - check whether required information is entered
     *             - loginTypeLevel (str):             *For Shinhan/Lotte corporate cards [Login classification] "0": User, "1": Business site/department manager, "2": General manager, (default: "2"))
     *             - clientTypeLevel (str):            *In case of Shinhan corporate card, [member classification] "0": credit card member, "1": check card member, "2": research grant credit card member
     *             - withdrawAccountNo (str):          * Daegu Bank [ID Login] Additional Information
     *             - withdrawAccountPassword (str):    Withdrawal account password	String	△	* Daegu Bank [ID Login] Additional Information
     *             - cardNo (str):                     Required if KB card possession verification is required: Enter the entire card number without masking
     *             - cardPassword (str):               When verification of KB card possession is required: First 2 digits of card PIN
     *             - connectedId (str):                User existing connectedId
     *
     *     Returns:
     *         The response from the Codef API after creating the account.
     *         ConnectedId
     */
    post: operations["add_account_api_codef_account_add_post"];
  };
  "/api/codef/account/update": {
    /**
     * Update Account
     * @description Modify account information of registered end users.
     *
     * If the account information used for account registration has changed, such as certificate renewal/reissue or password change,
     * it is necessary to modify the account information corresponding to the previously issued Connected ID with the changed account information.
     *
     * Args:
     *     param (UpdateAccountParam): The account update parameters.
     *
     *         - countryCode (str):    Korea: KR
     *         - businessType (str):   Bank, savings bank: BK, card: CD, securities: ST, insurance: IS
     *         - organization (str):   The organization code (could be bank, savings bank, card etc)
     *             산업은행    0002    광주은행     0034
     *             기업은행    0003    제주은행     0035
     *             국민은행    0004    전북은행     0037
     *             수협은행    0007    경남은행     0039
     *             농협은행    0011    새마을금고   0045
     *             우리은행    0020    신협은행     0048
     *             SC은행       0023    우체국      0071
     *             씨티은행    0027    KEB하나은행  0081
     *             대구은행    0031    신한은행     0088
     *             부산은행    0032    K뱅크       0089
     *         - clientType (str):                 Individual: P / Company, Corporation: B / Consolidated: A
     *         - loginType (str):                  0: Certificate, 1: ID/Password
     *         - derFile (str):                    [Basic certificate required] - Certificate der file string encoded in BASE64
     *         - keyFile (str):                    [Basic certificate required] - Certificate key file string encoded in BASE64
     *         - certFile (str):                   [Certificate pfx required] - Certificate pfx string encoded in BASE64
     *         - certType (str):                   Basic certificate (der/key) type: '1', certificate pfx type: 'pfx', (Default: 1)
     *         - id (str):                         Required for ID method, (Kiwoom) used for customers with multiple accounts
     *         - password (str):                   If using the certificate method, enter the certificate password, and if using the ID method, enter the ID password.
     *         - add_password (str):               (Kiwoom) Used for customers with multiple accounts
     *         - birthDate (str):                  "YYYYMMDD"
     *         - identity (str):                   *Insurance company only - check whether required information is entered
     *         - userName (str):                   *Insurance company - check whether required information is entered
     *         - loginTypeLevel (str):             *For Shinhan/Lotte corporate cards [Login classification] "0": User, "1": Business site/department manager, "2": General manager, (default: "2"))
     *         - clientTypeLevel (str):            *In case of Shinhan corporate card, [member classification] "0": credit card member, "1": check card member, "2": research grant credit card member
     *         - withdrawAccountNo (str):          * Daegu Bank [ID Login] Additional Information
     *         - withdrawAccountPassword (str):    Withdrawal account password     String  △       * Daegu Bank [ID Login] Additional Information
     *         - cardNo (str):                     Required if KB card possession verification is required: Enter the entire card number without masking
     *         - cardPassword (str):               When verification of KB card possession is required: First 2 digits of card PIN
     *         - connectedId (str):                User existing connectedId
     *
     * ref: https://developer.codef.io/common-guide/connected-id/update
     */
    post: operations["update_account_api_codef_account_update_post"];
  };
  "/api/codef/account/delete": {
    /**
     * Delete Account
     * @description Delete a user account.
     *
     *     ref: https://developer.codef.io/common-guide/connected-id/delete
     *
     *     Parameters:
     *         param (Annotated[DeleteAccountParam, Body]): The parameter for deleting the account. It contains the following fields:
     *
     *             - countryCode (str):    Korea: KR
     *             - businessType (str):   Bank, savings bank: BK, card: CD, securities: ST, insurance: IS
     *             - clientType (str):     Individual: P / Company, Corporation: B / Consolidated: A
     *             - organization (str):   The organization account.
     *                 산업은행	0002	광주은행     0034
     *                 기업은행	0003	제주은행     0035
     *                 국민은행	0004	전북은행     0037
     *                 수협은행	0007	경남은행     0039
     *                 농협은행	0011	새마을금고   0045
     *                 우리은행	0020    신협은행     0048
     *                 SC은행	   0023    우체국      0071
     *                 씨티은행	0027	KEB하나은행  0081
     *                 대구은행	0031	신한은행     0088
     *                 부산은행	0032	K뱅크       0089
     *             - loginType (str):      0: Certificate, 1: ID/Password
     *             - connectedId (str):    The connectedID of the user.
     *
     *     Returns:
     *         dict: The response data from the delete account API.
     */
    delete: operations["delete_account_api_codef_account_delete_delete"];
  };
  "/api/codef/bank/read_transaction_details": {
    /**
     * Bank Transaction Details
     * @description Check the transaction history of regular deposits and withdrawals.
     * ref: https://developer.codef.io/products/bank/common/p/transaction
     *
     * Parameters:
     *     param (BankTransactionDetailsParam): The parameter containing the bank transaction details.
     *
     *         - organization (str):   The organization code https://developer.codef.io/products/bank/overview
     *             산업은행    0002    광주은행     0034
     *             기업은행    0003    제주은행     0035
     *             국민은행    0004    전북은행     0037
     *             수협은행    0007    경남은행     0039
     *             농협은행    0011    새마을금고   0045
     *             우리은행    0020    신협은행     0048
     *             SC은행       0023    우체국      0071
     *             씨티은행    0027    KEB하나은행  0081
     *             대구은행    0031    신한은행     0088
     *             부산은행    0032    K뱅크       0089.
     *         - connectedId (str):    The user's connected ID.
     *         - account (str):        The account number.
     *         - startDate (str):      The start date of the transaction details "YYYYMMDD".
     *         - endDate (str):        The end date of the transaction details "YYYYMMDD".
     *         - orderBy (str):        The order by parameter "0": Most recent, "1": Oldest (default: "0").
     *         - inquiryType (str):    The inquiry type parameter [Whether to include tax on account] "0": Not included, "1": Included (default: "1").
     *         - pageCount (str):      The page count parameter Positive integer, (search as many pages as entered, other than total search).
     *
     * Returns:
     *     Any: The bank transaction details.
     */
    post: operations["bank_transaction_details_api_codef_bank_read_transaction_details_post"];
  };
  "/api/codef/bank/read_savings_transaction_history": {
    /**
     * Savings Transaction History
     * @description Retrieves the transaction history of a user's savings account.
     * ref: https://developer.codef.io/products/bank/common/p/installmentSavings
     *
     * Args:
     *     param (SavingsTransactionHistoryParam): The parameters for retrieving the transaction history. It should have the following fields:
     *
     *         - organization (str):               The organization code.
     *             산업은행    0002    광주은행     0034
     *             기업은행    0003    제주은행     0035
     *             국민은행    0004    전북은행     0037
     *             수협은행    0007    경남은행     0039
     *             농협은행    0011    새마을금고   0045
     *             우리은행    0020    신협은행     0048
     *             SC은행       0023    우체국      0071
     *             씨티은행    0027    KEB하나은행  0081
     *             대구은행    0031    신한은행     0088
     *             부산은행    0032    K뱅크       0089.
     *         - connectedId (str):                The connected ID for the user.
     *         - account (str):                    The account number of the savings account. Enter only numbers
     *         - startDate (str):                  The start date of the transaction history "YYYYMMDD".
     *         - endDate (str):                    The end date of the transaction history "YYYYMMDD".
     *         - orderBy (str):                    "0": 최신순, "1": 과거순 (default:"0")
     *         - inquiryType (str):                "0": Account details not included
     *         - birthDate (str):                  [ID Login] Additional Information
     *         - withdrawAccountNo (str):          Daegu Bank [ID Login] Additional Information
     *         - withdrawAccountPassword (str):    Daegu Bank [ID Login] Additional information, password
     *
     * Returns:
     *     Any: The transaction history data retrieved.
     */
    post: operations["savings_transaction_history_api_codef_bank_read_savings_transaction_history_post"];
  };
  "/api/codef/card/read_purchase_details": {
    /**
     * Card Purchase Details
     * @description Retrieves card purchase details.
     *     ref: https://developer.codef.io/products/card/common/b/purchase-detail
     *
     *     Args:
     *         param (CardPurchaseDetailsParam): The parameter for retrieving card purchase details.
     *
     *                 organization (str):         organization code
     *                     KB카드      0301    우리카드    0309
     *                     현대카드     0302    롯데카드    0311
     *                     삼성카드     0303    하나카드    0313
     *                     NH카드      0304      전북카드    0315
     *                     BC카드      0305      광주카드    0316
     *                     신한카드     0306    수협카드    0320
     *                     씨티카드     0307    제주카드    0321
     *                     산업은행카드  0002
     *                 connectedId (str):          User connectedId
     *                 identity (str):             In the case of Woori Card, if there are 3 or more password errors, ‘Business Registration Number’ must be entered.
     *                 loginTypeLevel (str):       "0": User, "1": Business site/department manager, "2": General manager, (default: "2")
     *                 clientTypeLevel (str):      [Member Classification]
     * "0": Credit card member, "1": Check card member, "2": Research fund credit card member, "3": Free Plus member * Required when using an integrated general manager
     * account
     *                 startDate (str):            "YYYYMMDD", payment date and month for Lotte Card
     *                 endDate (str):              "YYYYMMDD"
     *                 orderBy (str):              "0": 최신순, "1": 과거순 (default :"0")
     *                 inquiryType (str):          "0": Search by card, "1": Search all (default: "0")
     *                 cardNo (str):               inquiryType = "0" 필수
     *                 memberStoreInfoType (str):  "0": Not included, "1": Including affiliated stores (default: "0")
     *
     *     Returns:
     *         Any: The data containing the card purchase details.
     */
    post: operations["card_purchase_details_api_codef_card_read_purchase_details_post"];
  };
  "/": {
    /** Read Root */
    get: operations["read_root__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AIAssistantMessagesList */
    AIAssistantMessagesList: {
      /** Data */
      data: components["schemas"]["AIAssistantResponse"][];
      /**
       * Object
       * @constant
       */
      object: "list";
      /** First Id */
      first_id: string | null;
      /** Has More */
      has_more: boolean;
      /** Last Id */
      last_id: string | null;
    };
    /** AIAssistantResponse */
    AIAssistantResponse: {
      /** Id */
      id: string;
      /** Assistant Id */
      assistant_id: string | null;
      /** Content */
      content: components["schemas"]["ResponseMessage"][];
      /** Created At */
      created_at: number;
      /** File Ids */
      file_ids: unknown[];
      /** Metadata */
      metadata: Record<string, never>;
      /** Object */
      object: string;
      /**
       * Role
       * @enum {string}
       */
      role: "assistant" | "user";
      /** Run Id */
      run_id: string | null;
      /** Thread Id */
      thread_id: string;
    };
    /** AddAccountInput */
    AddAccountInput: {
      /** Countrycode */
      countryCode?: string | null;
      /** Businesstype */
      businessType?: ("BK" | "CD" | "ST" | "IS") | null;
      /** Organization */
      organization?: string | null;
      /** Clienttype */
      clientType?: ("P" | "B" | "A") | null;
      /** Logintype */
      loginType?: ("0" | "1") | null;
      /** Derfile */
      derFile?: string | null;
      /** Keyfile */
      keyFile?: string | null;
      /** Certfile */
      certFile?: string | null;
      /** Certtype */
      certType?: ("1" | "pfx") | null;
      /** Id */
      id?: string | null;
      /** Password */
      password?: string | null;
      /** Add Password */
      add_password?: string | null;
      /** Birthdate */
      birthDate?: string | null;
      /** Identity */
      identity?: string | null;
      /** Username */
      userName?: string | null;
      /** Logintypelevel */
      loginTypeLevel?: string | null;
      /** Clienttypelevel */
      clientTypeLevel?: string | null;
      /** Withdrawaccountno */
      withdrawAccountNo?: string | null;
      /** Withdrawaccountpassword */
      withdrawAccountPassword?: string | null;
      /** Cardno */
      cardNo?: string | null;
      /** Cardpassword */
      cardPassword?: string | null;
      /** Connectedid */
      connectedId?: string | null;
    };
    /** BankTransactionDetailsParam */
    BankTransactionDetailsParam: {
      /** Organization */
      organization?: string | null;
      /** Connectedid */
      connectedId?: string | null;
      /** Account */
      account?: string | null;
      /** Startdate */
      startDate?: string | null;
      /** Enddate */
      endDate?: string | null;
      /** Orderby */
      orderBy?: ("0" | "1") | null;
      /** Inquirytype */
      inquiryType?: ("0" | "1") | null;
      /** Accountpassword */
      accountPassword?: string | null;
      /** Birthdate */
      birthDate?: string | null;
      /** Withdrawaccountno */
      withdrawAccountNo?: string | null;
      /** Withdrawaccountpassword */
      withdrawAccountPassword?: string | null;
    };
    /** CardPurchaseDetailsParam */
    CardPurchaseDetailsParam: {
      /** Organization */
      organization?: string | null;
      /** Connectedid */
      connectedId?: string | null;
      /** Identity */
      identity?: string | null;
      /** Logintypelevel */
      loginTypeLevel?: ("0" | "1" | "2") | null;
      /** Clienttypelevel */
      clientTypeLevel?: ("0" | "1" | "2" | "3") | null;
      /** Startdate */
      startDate?: string | null;
      /** Enddate */
      endDate?: string | null;
      /** Orderby */
      orderBy?: ("0" | "1") | null;
      /** Inquirytype */
      inquiryType?: ("0" | "1") | null;
      /** Cardno */
      cardNo?: string | null;
      /** Memberstoreinfotype */
      memberStoreInfoType?: ("0" | "1") | null;
    };
    /** CodefFinancialInstitution */
    CodefFinancialInstitution: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Is Connected */
      is_connected: boolean;
    };
    /** CreateAccountInput */
    CreateAccountInput: {
      /** Countrycode */
      countryCode?: string | null;
      /**
       * Businesstype
       * @enum {string}
       */
      businessType: "BK" | "CD" | "ST" | "IS";
      /** Organization */
      organization?: string | null;
      /** Clienttype */
      clientType?: ("P" | "B" | "A") | null;
      /** Logintype */
      loginType?: ("0" | "1") | null;
      /** Derfile */
      derFile?: string | null;
      /** Keyfile */
      keyFile?: string | null;
      /** Certfile */
      certFile?: string | null;
      /** Certtype */
      certType?: ("1" | "pfx") | null;
      /** Id */
      id?: string | null;
      /** Password */
      password?: string | null;
      /** Add Password */
      add_password?: string | null;
      /** Birthdate */
      birthDate?: string | null;
      /** Identity */
      identity?: string | null;
      /** Username */
      userName?: string | null;
      /** Logintypelevel */
      loginTypeLevel?: string | null;
      /** Clienttypelevel */
      clientTypeLevel?: string | null;
      /** Withdrawaccountno */
      withdrawAccountNo?: string | null;
      /** Withdrawaccountpassword */
      withdrawAccountPassword?: string | null;
      /** Cardno */
      cardNo?: string | null;
      /** Cardpassword */
      cardPassword?: string | null;
    };
    /** CreateAccountResponse */
    CreateAccountResponse: {
      result: components["schemas"]["ResponseResult"];
      data: components["schemas"]["ResponseData"];
    };
    /** CreateUserMessageResponse */
    CreateUserMessageResponse: {
      /** Request */
      request: Record<string, never>;
      data: components["schemas"]["AIAssistantResponse"] | null;
      /** Error */
      error: string | null;
    };
    /** DeleteAccountInput */
    DeleteAccountInput: {
      /** Countrycode */
      countryCode?: string | null;
      /** Businesstype */
      businessType?: ("BK" | "CD" | "ST" | "IS") | null;
      /** Organization */
      organization?: string | null;
      /** Clienttype */
      clientType?: ("P" | "B" | "A") | null;
      /** Logintype */
      loginType?: ("0" | "1") | null;
      /** Connectedid */
      connectedId?: string | null;
    };
    /** DeleteAccountResponse */
    DeleteAccountResponse: {
      result: components["schemas"]["ResponseResult"];
      data: components["schemas"]["ResponseData"];
    };
    /** DeleteUserConnectedInstitutionResponse */
    DeleteUserConnectedInstitutionResponse: {
      /** Code */
      code: number;
      /** Is Success */
      is_success: boolean;
      /** Message */
      message: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Institution */
    Institution: {
      /** Id */
      id: string;
      /** Name */
      name: string;
    };
    /** Message */
    Message: {
      /** Content */
      content: string;
      /**
       * Contenttype
       * @default text/markdown
       */
      contentType?: string;
      /**
       * Isliked
       * @default false
       */
      isLiked?: boolean;
      /**
       * Isdisliked
       * @default false
       */
      isDisliked?: boolean;
      /**
       * Status
       * @default sent
       * @enum {string}
       */
      status?: "sent" | "delivered" | "read" | "failed";
      /**
       * Isresponse
       * @default false
       */
      isResponse?: boolean;
    };
    /** MessageText */
    MessageText: {
      /** Annotations */
      annotations: string[];
      /** Value */
      value: string;
    };
    /** ReadInstitutionResponse */
    ReadInstitutionResponse: {
      /** Id */
      id: string;
      /** Name */
      name: string;
    };
    /** ReadInstitutionsResponse */
    ReadInstitutionsResponse: {
      /** Data */
      data: components["schemas"]["Institution"][];
    };
    /** ReadUserConnectedInstitutionsResponse */
    ReadUserConnectedInstitutionsResponse: {
      /** Data */
      data: components["schemas"]["CodefFinancialInstitution"][];
    };
    /** ReadUserMessageResponse */
    ReadUserMessageResponse: {
      /** Request */
      request: Record<string, never>;
      data: components["schemas"]["AIAssistantMessagesList"] | null;
      /** Error */
      error: string | null;
    };
    /** ReadUserResponse */
    ReadUserResponse: {
      data: components["schemas"]["User"];
    };
    /** ResponseData */
    ResponseData: {
      /** Connectedid */
      connectedId?: string | null;
      /** Successlist */
      successList: components["schemas"]["ResponseSuccess"][] | unknown[];
      /** Errorlist */
      errorList: components["schemas"]["ResponseError"][] | unknown[];
    };
    /** ResponseError */
    ResponseError: {
      /** Clienttype */
      clientType: string | null;
      /** Code */
      code: string | null;
      /** Logintype */
      loginType: string | null;
      /** Countrycode */
      countryCode: string | null;
      /** Organization */
      organization: string | null;
      /** Extramessage */
      extraMessage: string | null;
      /** Businesstype */
      businessType: string | null;
      /** Message */
      message: string | null;
    };
    /** ResponseMessage */
    ResponseMessage: {
      text: components["schemas"]["MessageText"];
      /** Type */
      type: string;
    };
    /** ResponseResult */
    ResponseResult: {
      /** Code */
      code: string;
      /** Extramessage */
      extraMessage: string;
      /** Message */
      message: string;
      /** Transactionid */
      transactionId: string;
    };
    /** ResponseSuccess */
    ResponseSuccess: {
      /** Clienttype */
      clientType: string;
      /** Code */
      code: string;
      /** Logintype */
      loginType: string;
      /** Countrycode */
      countryCode: string;
      /** Organization */
      organization: string;
      /** Extramessage */
      extraMessage: string;
      /** Businesstype */
      businessType: string;
      /** Message */
      message: string;
    };
    /** SavingsTransactionHistoryParam */
    SavingsTransactionHistoryParam: {
      /** Organization */
      organization?: string | null;
      /** Connectedid */
      connectedId?: string | null;
      /** Account */
      account?: string | null;
      /** Startdate */
      startDate?: string | null;
      /** Enddate */
      endDate?: string | null;
      /** Orderby */
      orderBy?: ("0" | "1") | null;
      /** Inquirytype */
      inquiryType?: string | null;
      /** Birthdate */
      birthDate?: string | null;
      /** Withdrawaccountno */
      withdrawAccountNo?: string | null;
      /** Withdrawaccountpassword */
      withdrawAccountPassword?: string | null;
    };
    /** UpdateAccountInput */
    UpdateAccountInput: {
      /** Countrycode */
      countryCode?: string | null;
      /** Businesstype */
      businessType?: ("BK" | "CD" | "ST" | "IS") | null;
      /** Organization */
      organization?: string | null;
      /** Clienttype */
      clientType?: ("P" | "B" | "A") | null;
      /** Logintype */
      loginType?: ("0" | "1") | null;
      /** Derfile */
      derFile?: string | null;
      /** Keyfile */
      keyFile?: string | null;
      /** Certfile */
      certFile?: string | null;
      /** Certtype */
      certType?: ("1" | "pfx") | null;
      /** Id */
      id?: string | null;
      /** Password */
      password?: string | null;
      /** Add Password */
      add_password?: string | null;
      /** Birthdate */
      birthDate?: string | null;
      /** Identity */
      identity?: string | null;
      /** Logintypelevel */
      loginTypeLevel?: ("0" | "1" | "2") | null;
      /** Clienttypelevel */
      clientTypeLevel?: string | null;
      /** Withdrawaccountno */
      withdrawAccountNo?: string | null;
      /** Withdrawaccountpassword */
      withdrawAccountPassword?: string | null;
      /** Cardno */
      cardNo?: string | null;
      /** Cardpassword */
      cardPassword?: string | null;
      /** Connectedid */
      connectedId?: string | null;
    };
    /** UpsertUserConnectedInstitutionResponse */
    UpsertUserConnectedInstitutionResponse: {
      /** Code */
      code: number;
      /** Is Success */
      is_success: boolean;
      /** Message */
      message: string;
    };
    /** UpsertUserConnectedInstitutionsInput */
    UpsertUserConnectedInstitutionsInput: {
      /** Institution Id */
      institution_id: string;
      /** User Institution Username */
      user_institution_username: string;
      /** User Institution Password */
      user_institution_password: string;
    };
    /** User */
    User: {
      /** Credit */
      credit: number;
      /** Display Name */
      display_name?: string | null;
      /** Phone Number */
      phone_number?: string | null;
      /** Profile Picture */
      profile_picture?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Read User
   * @description Read all available institutions for user to connect into
   */
  read_user_api_users__user_id__get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadUserResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User Connected Institutions
   * @description Read all institutions the user is associated into
   */
  read_user_connected_institutions_api_users__user_id__connected_institutions_get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadUserConnectedInstitutionsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upsert User Connected Institutions
   * @description Connect user to Institution
   */
  upsert_user_connected_institutions_api_users__user_id__connected_institutions_put: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpsertUserConnectedInstitutionsInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UpsertUserConnectedInstitutionResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User Connected Institution
   * @description Disconnect user from Institution
   */
  delete_user_connected_institution_api_users__user_id__connected_institutions__institution_id__delete: {
    parameters: {
      path: {
        user_id: string;
        institution_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteUserConnectedInstitutionResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User Messages
   * @description Read user messages.
   *
   * :param request: The request object.
   * :param user_id: The ID of the user.
   * :param authorization: The authorization token.
   * :param page: The page number.
   * :param page_size: The number of items per page.
   * :param order: The order of the messages (ascending or descending).
   *
   * :return: The response object containing the user's messages.
   */
  read_user_messages_api_users__user_id__messages_get: {
    parameters: {
      query?: {
        page?: string | null;
        page_size?: string | null;
        order?: "asc" | "desc";
      };
      header: {
        /** @description Bearer *************** */
        authorization: string;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadUserMessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create User Message
   * @description Creates a user message and sends it to the specified user.
   *
   * Args:
   *     request (Request): The request object.
   *     user_id (str): The ID of the user.
   *     message (Message): The message to be sent.
   *     authorization (str): The authorization header.
   *
   * Returns:
   *     dict: The response containing the request, data, and error fields.
   */
  create_user_message_api_users__user_id__messages_post: {
    parameters: {
      header: {
        /** @description Bearer *************** */
        authorization: string;
      };
      path: {
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Message"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CreateUserMessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User Message
   * @description Retrieves a specific message for a given user from the database.
   *
   * Args:
   *     user_id (str): The ID of the user.
   *     message_id (str): The ID of the message.
   *
   * Returns:
   *     dict: A dictionary containing the response data.
   *         - "request" (dict): Information about the request made.
   *             - "route" (str): The route of the request.
   *             - "method" (str): The HTTP method used.
   *         - "data" (dict): The data retrieved from the database.
   *         - "error" (str): Any error that occurred during the retrieval.
   */
  read_user_message_api_users__user_id__messages__message_id__get: {
    parameters: {
      path: {
        user_id: string;
        message_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update User Message
   * @description Update a user's message.
   *
   * Args:
   *     user_id (str): The ID of the user.
   *     message_id (str): The ID of the message.
   *     message (Message): The updated message.
   *
   * Returns:
   *     dict: A dictionary containing the response data.
   *         - "request": A dictionary with the request details.
   *             - "route": The route of the request.
   *             - "method": The HTTP method of the request.
   *             - "data": The data sent in the request.
   *         - "data": The updated message data.
   *         - "error": Any error that occurred during the update.
   */
  update_user_message_api_users__user_id__messages__message_id__put: {
    parameters: {
      path: {
        user_id: string;
        message_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Message"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User Message
   * @description Deletes a user message from the database and returns the response.
   *
   * Parameters:
   *     user_id (str): The ID of the user.
   *     message_id (str): The ID of the message to be deleted.
   *
   * Returns:
   *     dict: A dictionary containing the response data.
   */
  delete_user_message_api_users__user_id__messages__message_id__delete: {
    parameters: {
      path: {
        user_id: string;
        message_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create a new Assistant
   * @description Creates a new assistant for a user.
   */
  create_assistant_api_users_assistant_create_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Create a new Thread
   * @description Creates a new conversation thread for a user's assistant.
   */
  create_thread_api_users_assistant__assistant_id__thread_create_post: {
    parameters: {
      path: {
        assistant_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add a Message
   * @description Add a message to a conversation thread.
   */
  add_message_api_users_assistant__assistant_id__thread__thread_id__message_post: {
    parameters: {
      query: {
        message: string;
      };
      path: {
        assistant_id: string;
        thread_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Chat with Assistant
   * @description Retrieve responses from the assistant in a conversation thread.
   */
  chat_with_assistant_api_users_assistant__assistant_id__thread__thread_id__chat_get: {
    parameters: {
      query: {
        instructions: string;
      };
      path: {
        assistant_id: string;
        thread_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add a Message and Run
   * @description Add a message to a conversation thread and run the conversation with the assistant.
   */
  add_message_and_run_api_users_assistant__assistant_id__thread__thread_id__message_and_run_post: {
    parameters: {
      query: {
        message: string;
        instructions: string;
      };
      path: {
        assistant_id: string;
        thread_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get All Messages
   * @description Retrieve all messages in a conversation thread.
   */
  get_all_messages_api_users_assistant__assistant_id__thread__thread_id__all_messages_get: {
    parameters: {
      path: {
        thread_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Run Assistant With Functions
   * @description Run the assistant with specified functions and get the response.
   *
   * Args:
   * - assistant_id (str): The ID of the assistant.
   * - thread_id (str): The ID of the thread.
   * - instructions (str): The instructions for the conversation.
   * - functions (list): List of functions to be executed by the assistant.
   *
   * Returns:
   * - response (str): The assistant's response in the conversation thread.
   */
  run_assistant_with_functions_api_users_assistant__assistant_id__thread__thread_id__run_with_functions_post: {
    parameters: {
      path: {
        assistant_id: string;
        thread_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Institutions
   * @description Read all available institutions for user to connect into
   */
  read_institutions_api_institutions_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadInstitutionsResponse"];
        };
      };
    };
  };
  /** Read Institution */
  read_institution_api_institutions__institution_id__get: {
    parameters: {
      path: {
        institution_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadInstitutionResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Account
   * @description To use an API that requires authentication, you must create a Connected ID.
   *     A Connected ID is created when an end user registers their account information.
   *     ref: https://developer.codef.io/common-guide/connected-id/register
   *
   *     Args:
   *         param (CreateAccountParam): The account creation parameters.
   *
   *             - countryCode (str):    Korea: KR
   *             - businessType (str):   Bank, savings bank: BK, card: CD, securities: ST, insurance: IS
   *             - organization (str):   The organization code
   *                 산업은행	0002	광주은행     0034
   *                 기업은행	0003	제주은행     0035
   *                 국민은행	0004	전북은행     0037
   *                 수협은행	0007	경남은행     0039
   *                 농협은행	0011	새마을금고   0045
   *                 우리은행	0020    신협은행     0048
   *                 SC은행	   0023    우체국      0071
   *                 씨티은행	0027	KEB하나은행  0081
   *                 대구은행	0031	신한은행     0088
   *                 부산은행	0032	K뱅크       0089
   *             - clientType (str):                 Individual: P / Company, Corporation: B / Consolidated: A
   *             - loginType	(str):                  0: Certificate, 1: ID/Password
   *             - derFile (str):                    [Basic certificate required] - Certificate der file string encoded in BASE64
   *             - keyFile (str):                    [Basic certificate required] - Certificate key file string encoded in BASE64
   *             - certFile (str):                   [Certificate pfx required] - Certificate pfx string encoded in BASE64
   *             - certType (str):                   Basic certificate (der/key) type: '1', certificate pfx type: 'pfx', (Default: 1)
   *             - id (str):                         Required for ID method, (Kiwoom) used for customers with multiple accounts
   *             - password (str):                   If using the certificate method, enter the certificate password, and if using the ID method, enter the ID password.
   *             - add_password (str):               (Kiwoom) Used for customers with multiple accounts
   *             - birthDate (str):                  "YYYYMMDD"
   *             - identity (str):	                *Insurance company only - check whether required information is entered
   *             - userName (str):                   *Insurance company - check whether required information is entered
   *             - loginTypeLevel (str):             *For Shinhan/Lotte corporate cards [Login classification] "0": User, "1": Business site/department manager, "2": General manager, (default: "2"))
   *             - clientTypeLevel (str):            *In case of Shinhan corporate card, [member classification] "0": credit card member, "1": check card member, "2": research grant credit card member
   *             - withdrawAccountNo (str):          * Daegu Bank [ID Login] Additional Information
   *             - withdrawAccountPassword (str):    Withdrawal account password	String	△	* Daegu Bank [ID Login] Additional Information
   *             - cardNo (str):                     Required if KB card possession verification is required: Enter the entire card number without masking
   *             - cardPassword (str):               When verification of KB card possession is required: First 2 digits of card PIN
   *
   *     Returns:
   *         dict: The response data containing the account details.
   */
  create_account_api_codef_account_create_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAccountInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CreateAccountResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add Account
   * @description If an end user who has created a Connected ID wants to add account information for a new organization,
   *     he or she must use the Add Account API.
   *     ref: https://developer.codef.io/common-guide/connected-id/add
   *
   *     Args:
   *         param (AddAccountParam): The account adding parameters.
   *
   *             - countryCode (str):    Korea: KR
   *             - businessType (str):   Bank, savings bank: BK, card: CD, securities: ST, insurance: IS
   *             - organization (str):   The organization code
   *                 산업은행	0002	광주은행     0034
   *                 기업은행	0003	제주은행     0035
   *                 국민은행	0004	전북은행     0037
   *                 수협은행	0007	경남은행     0039
   *                 농협은행	0011	새마을금고   0045
   *                 우리은행	0020    신협은행     0048
   *                 SC은행	   0023    우체국      0071
   *                 씨티은행	0027	KEB하나은행  0081
   *                 대구은행	0031	신한은행     0088
   *                 부산은행	0032	K뱅크       0089
   *             - clientType (str):                 Individual: P / Company, Corporation: B / Consolidated: A
   *             - loginType	(str):                  0: Certificate, 1: ID/Password
   *             - derFile (str):                    [Basic certificate required] - Certificate der file string encoded in BASE64
   *             - keyFile (str):                    [Basic certificate required] - Certificate key file string encoded in BASE64
   *             - certFile (str):                   [Certificate pfx required] - Certificate pfx string encoded in BASE64
   *             - certType (str):                   Basic certificate (der/key) type: '1', certificate pfx type: 'pfx', (Default: 1)
   *             - id (str):                         Required for ID method, (Kiwoom) used for customers with multiple accounts
   *             - password (str):                   If using the certificate method, enter the certificate password, and if using the ID method, enter the ID password.
   *             - add_password (str):               (Kiwoom) Used for customers with multiple accounts
   *             - birthDate (str):                  "YYYYMMDD"
   *             - identity (str):	                *Insurance company only - check whether required information is entered
   *             - userName (str):                   *Insurance company - check whether required information is entered
   *             - loginTypeLevel (str):             *For Shinhan/Lotte corporate cards [Login classification] "0": User, "1": Business site/department manager, "2": General manager, (default: "2"))
   *             - clientTypeLevel (str):            *In case of Shinhan corporate card, [member classification] "0": credit card member, "1": check card member, "2": research grant credit card member
   *             - withdrawAccountNo (str):          * Daegu Bank [ID Login] Additional Information
   *             - withdrawAccountPassword (str):    Withdrawal account password	String	△	* Daegu Bank [ID Login] Additional Information
   *             - cardNo (str):                     Required if KB card possession verification is required: Enter the entire card number without masking
   *             - cardPassword (str):               When verification of KB card possession is required: First 2 digits of card PIN
   *             - connectedId (str):                User existing connectedId
   *
   *     Returns:
   *         The response from the Codef API after creating the account.
   *         ConnectedId
   */
  add_account_api_codef_account_add_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddAccountInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Account
   * @description Modify account information of registered end users.
   *
   * If the account information used for account registration has changed, such as certificate renewal/reissue or password change,
   * it is necessary to modify the account information corresponding to the previously issued Connected ID with the changed account information.
   *
   * Args:
   *     param (UpdateAccountParam): The account update parameters.
   *
   *         - countryCode (str):    Korea: KR
   *         - businessType (str):   Bank, savings bank: BK, card: CD, securities: ST, insurance: IS
   *         - organization (str):   The organization code (could be bank, savings bank, card etc)
   *             산업은행    0002    광주은행     0034
   *             기업은행    0003    제주은행     0035
   *             국민은행    0004    전북은행     0037
   *             수협은행    0007    경남은행     0039
   *             농협은행    0011    새마을금고   0045
   *             우리은행    0020    신협은행     0048
   *             SC은행       0023    우체국      0071
   *             씨티은행    0027    KEB하나은행  0081
   *             대구은행    0031    신한은행     0088
   *             부산은행    0032    K뱅크       0089
   *         - clientType (str):                 Individual: P / Company, Corporation: B / Consolidated: A
   *         - loginType (str):                  0: Certificate, 1: ID/Password
   *         - derFile (str):                    [Basic certificate required] - Certificate der file string encoded in BASE64
   *         - keyFile (str):                    [Basic certificate required] - Certificate key file string encoded in BASE64
   *         - certFile (str):                   [Certificate pfx required] - Certificate pfx string encoded in BASE64
   *         - certType (str):                   Basic certificate (der/key) type: '1', certificate pfx type: 'pfx', (Default: 1)
   *         - id (str):                         Required for ID method, (Kiwoom) used for customers with multiple accounts
   *         - password (str):                   If using the certificate method, enter the certificate password, and if using the ID method, enter the ID password.
   *         - add_password (str):               (Kiwoom) Used for customers with multiple accounts
   *         - birthDate (str):                  "YYYYMMDD"
   *         - identity (str):                   *Insurance company only - check whether required information is entered
   *         - userName (str):                   *Insurance company - check whether required information is entered
   *         - loginTypeLevel (str):             *For Shinhan/Lotte corporate cards [Login classification] "0": User, "1": Business site/department manager, "2": General manager, (default: "2"))
   *         - clientTypeLevel (str):            *In case of Shinhan corporate card, [member classification] "0": credit card member, "1": check card member, "2": research grant credit card member
   *         - withdrawAccountNo (str):          * Daegu Bank [ID Login] Additional Information
   *         - withdrawAccountPassword (str):    Withdrawal account password     String  △       * Daegu Bank [ID Login] Additional Information
   *         - cardNo (str):                     Required if KB card possession verification is required: Enter the entire card number without masking
   *         - cardPassword (str):               When verification of KB card possession is required: First 2 digits of card PIN
   *         - connectedId (str):                User existing connectedId
   *
   * ref: https://developer.codef.io/common-guide/connected-id/update
   */
  update_account_api_codef_account_update_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAccountInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Account
   * @description Delete a user account.
   *
   *     ref: https://developer.codef.io/common-guide/connected-id/delete
   *
   *     Parameters:
   *         param (Annotated[DeleteAccountParam, Body]): The parameter for deleting the account. It contains the following fields:
   *
   *             - countryCode (str):    Korea: KR
   *             - businessType (str):   Bank, savings bank: BK, card: CD, securities: ST, insurance: IS
   *             - clientType (str):     Individual: P / Company, Corporation: B / Consolidated: A
   *             - organization (str):   The organization account.
   *                 산업은행	0002	광주은행     0034
   *                 기업은행	0003	제주은행     0035
   *                 국민은행	0004	전북은행     0037
   *                 수협은행	0007	경남은행     0039
   *                 농협은행	0011	새마을금고   0045
   *                 우리은행	0020    신협은행     0048
   *                 SC은행	   0023    우체국      0071
   *                 씨티은행	0027	KEB하나은행  0081
   *                 대구은행	0031	신한은행     0088
   *                 부산은행	0032	K뱅크       0089
   *             - loginType (str):      0: Certificate, 1: ID/Password
   *             - connectedId (str):    The connectedID of the user.
   *
   *     Returns:
   *         dict: The response data from the delete account API.
   */
  delete_account_api_codef_account_delete_delete: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteAccountInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteAccountResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Bank Transaction Details
   * @description Check the transaction history of regular deposits and withdrawals.
   * ref: https://developer.codef.io/products/bank/common/p/transaction
   *
   * Parameters:
   *     param (BankTransactionDetailsParam): The parameter containing the bank transaction details.
   *
   *         - organization (str):   The organization code https://developer.codef.io/products/bank/overview
   *             산업은행    0002    광주은행     0034
   *             기업은행    0003    제주은행     0035
   *             국민은행    0004    전북은행     0037
   *             수협은행    0007    경남은행     0039
   *             농협은행    0011    새마을금고   0045
   *             우리은행    0020    신협은행     0048
   *             SC은행       0023    우체국      0071
   *             씨티은행    0027    KEB하나은행  0081
   *             대구은행    0031    신한은행     0088
   *             부산은행    0032    K뱅크       0089.
   *         - connectedId (str):    The user's connected ID.
   *         - account (str):        The account number.
   *         - startDate (str):      The start date of the transaction details "YYYYMMDD".
   *         - endDate (str):        The end date of the transaction details "YYYYMMDD".
   *         - orderBy (str):        The order by parameter "0": Most recent, "1": Oldest (default: "0").
   *         - inquiryType (str):    The inquiry type parameter [Whether to include tax on account] "0": Not included, "1": Included (default: "1").
   *         - pageCount (str):      The page count parameter Positive integer, (search as many pages as entered, other than total search).
   *
   * Returns:
   *     Any: The bank transaction details.
   */
  bank_transaction_details_api_codef_bank_read_transaction_details_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransactionDetailsParam"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Savings Transaction History
   * @description Retrieves the transaction history of a user's savings account.
   * ref: https://developer.codef.io/products/bank/common/p/installmentSavings
   *
   * Args:
   *     param (SavingsTransactionHistoryParam): The parameters for retrieving the transaction history. It should have the following fields:
   *
   *         - organization (str):               The organization code.
   *             산업은행    0002    광주은행     0034
   *             기업은행    0003    제주은행     0035
   *             국민은행    0004    전북은행     0037
   *             수협은행    0007    경남은행     0039
   *             농협은행    0011    새마을금고   0045
   *             우리은행    0020    신협은행     0048
   *             SC은행       0023    우체국      0071
   *             씨티은행    0027    KEB하나은행  0081
   *             대구은행    0031    신한은행     0088
   *             부산은행    0032    K뱅크       0089.
   *         - connectedId (str):                The connected ID for the user.
   *         - account (str):                    The account number of the savings account. Enter only numbers
   *         - startDate (str):                  The start date of the transaction history "YYYYMMDD".
   *         - endDate (str):                    The end date of the transaction history "YYYYMMDD".
   *         - orderBy (str):                    "0": 최신순, "1": 과거순 (default:"0")
   *         - inquiryType (str):                "0": Account details not included
   *         - birthDate (str):                  [ID Login] Additional Information
   *         - withdrawAccountNo (str):          Daegu Bank [ID Login] Additional Information
   *         - withdrawAccountPassword (str):    Daegu Bank [ID Login] Additional information, password
   *
   * Returns:
   *     Any: The transaction history data retrieved.
   */
  savings_transaction_history_api_codef_bank_read_savings_transaction_history_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SavingsTransactionHistoryParam"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Card Purchase Details
   * @description Retrieves card purchase details.
   *     ref: https://developer.codef.io/products/card/common/b/purchase-detail
   *
   *     Args:
   *         param (CardPurchaseDetailsParam): The parameter for retrieving card purchase details.
   *
   *                 organization (str):         organization code
   *                     KB카드      0301    우리카드    0309
   *                     현대카드     0302    롯데카드    0311
   *                     삼성카드     0303    하나카드    0313
   *                     NH카드      0304      전북카드    0315
   *                     BC카드      0305      광주카드    0316
   *                     신한카드     0306    수협카드    0320
   *                     씨티카드     0307    제주카드    0321
   *                     산업은행카드  0002
   *                 connectedId (str):          User connectedId
   *                 identity (str):             In the case of Woori Card, if there are 3 or more password errors, ‘Business Registration Number’ must be entered.
   *                 loginTypeLevel (str):       "0": User, "1": Business site/department manager, "2": General manager, (default: "2")
   *                 clientTypeLevel (str):      [Member Classification]
   * "0": Credit card member, "1": Check card member, "2": Research fund credit card member, "3": Free Plus member * Required when using an integrated general manager
   * account
   *                 startDate (str):            "YYYYMMDD", payment date and month for Lotte Card
   *                 endDate (str):              "YYYYMMDD"
   *                 orderBy (str):              "0": 최신순, "1": 과거순 (default :"0")
   *                 inquiryType (str):          "0": Search by card, "1": Search all (default: "0")
   *                 cardNo (str):               inquiryType = "0" 필수
   *                 memberStoreInfoType (str):  "0": Not included, "1": Including affiliated stores (default: "0")
   *
   *     Returns:
   *         Any: The data containing the card purchase details.
   */
  card_purchase_details_api_codef_card_read_purchase_details_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardPurchaseDetailsParam"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read Root */
  read_root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
